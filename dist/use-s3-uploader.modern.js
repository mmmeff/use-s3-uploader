import{useMemo as e,useCallback as t,useEffect as s}from"react";import n from"mime-types";function r(e){return e.type||n.lookup(e.name)}class i{constructor(e){this.test=void 0,this.server=void 0,this.s3path=void 0,this.signingUrl=void 0,this.signingUrlMethod=void 0,this.successResponses=void 0,this.contentDisposition=void 0,this.uploadRequestHeaders=void 0,this.httprequest=void 0,this.signingUrlQueryParams=void 0,this.signingUrlHeaders=void 0,this.signingUrlWithCredentials=void 0,this.el=void 0,this.getSignedUrl=void 0,this.onProgress=(e,t,s)=>console.log("base.onProgress()",e,t);const t=this;t.test=!1,t.server="",t.signingUrl="/sign-s3",t.signingUrlMethod="GET",t.successResponses=[200,201],null==e&&(e={});for(let s in e)e.hasOwnProperty(s)&&(t[s]=e[s])}handle(e){const t=[];for(let s=0;s<e.length;s++)this.onUploadStart(e[s],function(e){return this.onProgress(0,"Waiting",e),t.push(this.uploadFile(e)),t}.bind(this))}uploadFile(e){const t=this.uploadToS3.bind(this,e);return this.getSignedUrl?this.getSignedUrl(e,t):this.executeOnSignedUrl(e,t)}uploadToS3(e,t){const s=this.createCORSRequest("PUT",t.signedUrl);s?(s.onload=function(){return this.successResponses.indexOf(s.status)>=0?(this.onProgress(100,"Upload completed",e),this.onFinish(t,e)):this.onError("Upload error: "+s.status,e,this._getErrorRequestContext(s))}.bind(this),s.onerror=function(){return this.onError("XHR error",e,this._getErrorRequestContext(s))}.bind(this),s.upload.onprogress=function(t){let s;if(t.lengthComputable)return s=Math.round(t.loaded/t.total*100),this.onProgress(s,100===s?"Finalizing":"Uploading",e)}.bind(this)):this.onError("CORS not supported",e);const n=r(e),i={"content-type":n};if(this.contentDisposition){let t=this.contentDisposition;"auto"===t&&(t="image/"===n.substr(0,6)?"inline":"attachment");let s=this.scrubFilename(e.name);i["content-disposition"]=t+'; filename="'+s+'"'}return this.uploadRequestHeaders||s.setRequestHeader("x-amz-acl","public-read"),[t.headers,this.uploadRequestHeaders].filter(Boolean).forEach(function(e){Object.entries(e).forEach(function(e){i[e[0].toLowerCase()]=e[1]})}),Object.entries(i).forEach(function(e){s.setRequestHeader(e[0],e[1])}),this.httprequest=s,s.send(e)}createCORSRequest(e,t,s){s=s||{};let n=new XMLHttpRequest;return null!=n.withCredentials?(n.open(e,t,!0),null!=s.withCredentials&&(n.withCredentials=s.withCredentials)):n=null,n}executeOnSignedUrl(e,t){let s="?objectName="+this.scrubFilename(e.name)+"&contentType="+encodeURIComponent(r(e));if(this.s3path&&(s+="&path="+encodeURIComponent(this.s3path)),this.signingUrlQueryParams){const e="function"==typeof this.signingUrlQueryParams?this.signingUrlQueryParams():this.signingUrlQueryParams;Object.keys(e).forEach(function(t){s+="&"+t+"="+e[t]})}const n=this.createCORSRequest(this.signingUrlMethod,this.server+this.signingUrl+s,{withCredentials:this.signingUrlWithCredentials});if(this.signingUrlHeaders){const e="function"==typeof this.signingUrlHeaders?this.signingUrlHeaders():this.signingUrlHeaders;Object.keys(e).forEach(function(t){n.setRequestHeader(t,e[t])})}return n.overrideMimeType&&n.overrideMimeType("text/plain; charset=x-user-defined"),n.onreadystatechange=function(){if(4===n.readyState&&this.successResponses.indexOf(n.status)>=0){let s;try{s=JSON.parse(n.responseText),this.onSignedUrl(s)}catch(t){return this.onError("Invalid response from server",e,this._getErrorRequestContext(n)),!1}return t(s)}if(4===n.readyState&&this.successResponses.indexOf(n.status)<0)return this.onError("Could not contact request signing server. Status = "+n.status,e,this._getErrorRequestContext(n))}.bind(this),n.send()}onFinish(e,t){return console.log("base.onFinish()",e.publicUrl)}onUploadStart(e,t){return console.log("base.onUploadStart()",e),t(e)}onError(e,t){return console.log("base.onError()",e)}onSignedUrl(e){}scrubFilename(e){return e.replace(/[^\w\d_\-\.]+/gi,"")}abortUpload(){this.httprequest&&this.httprequest.abort()}_getErrorRequestContext(e){return{response:e.responseText,status:e.status,statusText:e.statusText,readyState:e.readyState}}}const o=(n,r)=>{const o=e(()=>{const e=new i(n);return n.test&&console.log(e),e},[n,r]),a=t((e,t)=>{o.handle(e&&e.files||[])},[]);s(()=>{const e=function(e,t){if(!e)return;let s;return s="function"==typeof e?e():"current"in e?e.current:e,s}(r);return e.addEventListener("change",t=>a(e,t)),()=>{e.removeEventListener("change",t=>a(e,t))}},[n,r])};export{o as useS3Uploader};
